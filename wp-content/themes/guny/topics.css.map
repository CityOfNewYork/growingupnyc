{"version":3,"sources":["topics.scss","../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_box-sizing.scss","tools/_unit.scss","settings/_variables.scss","../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_media.scss","tools/_type.scss"],"names":[],"mappings":"AAAA;;;;;;EAME;ACHA;EACE,uBAAuB,EACxB;;AAED;EAII,oBAAoB,EACrB;;ACVL,uBAAuB;AAsEvB,sBAAsB;AFjDtB;EACE,YGbS,EHcV;;AAED;EACE,OAAO,EACR;;AAED;EAEI,YGtBO,EHuBR;;AAHH;EAOM,eGVe,EHWhB;;AAKL;EACE,iBG1BoB;EH2BpB,kBEoBW,EFnBZ;;AASD;EACE,eAAe;EACf,oBEGoB,EFMrB;EImBG;IJ9BJ;MAKI,mBEAkB,EFMrB,EAAA;EImBG;IJ9BJ;MASI,oBEJkB,EFMrB,EAAA;;AAED;EACE,sBAAsB;EACtB,YAAY;EACZ,mBAAmB;EACnB,iBGpDU;EHqDV,YGzDmB;EH0DnB,4BEdoB;EFepB,iBEVW,EF0FZ;EItEG;IJjBJ;MAUI,6BElBkB,EF+FrB,EAAA;EItEG;IJjBJ;MAcI,0BEtBkB,EF+FrB,EAAA;EAvFD;IAkBI,YAAY;IACZ,mBAAmB;IACnB,OAAO;IACP,QAAQ;IACR,SAAS;IACT,oCGhEiB,EHiElB;EAxBH;IA2BI,sBAAsB;IACtB,yBEpCkB,EFwCnB;IIfC;MJjBJ;QA8BM,yBEtCgB,EFwCnB,EAAA;EAhCH;IAmCI,YGnFQ;IHoFR,8CGrCkD;IHsClD,oBG9EiB;IEhBjB,qBHiDkB;IF+ClB,iBGlCwB;IHmCxB,yBEhDkB;IFiDlB,aAAa,EAKd;II7BC;MJjBJ;QKvDM,kBH+CgB,EFsDnB,EAAA;IA9CH;MA4CM,iBGtGK,EHuGN;EA7CL;IAmDM,sBGlGU,EHmGX;EApDL;IAuDM,oBGtGU,EH0GX;IA3DL;MAyDQ,iBGnHG,EHoHJ;EA1DP;IAgEM,sBGtGa,EHuGd;EAjEL;IAoEM,oBG1Ga,EH8Gd;IAxEL;MAsEQ,iBGhIG,EHiIJ;EAvEP;IA6EM,sBGlHS,EHmHV;EA9EL;IAiFM,oBGtHS,EH0HV;IArFL;MAmFQ,iBG7IG,EH8IJ;;AAMP;EACE,oBGpImB,EHqIpB","file":"topics.css","sourcesContent":["/*!\nTheme Name: Growing Up NYC\nTheme URI: http://www.bluestatedigital.com\nAuthor: Blue State Digital\nAuthor URI: http://www.bluestatedigital.com\nDescription: Custom theme for GUNY override styles for Micro Site Topics\n*/\n\n// Settings (Global variables)\n// =====================\n@import \"neat-helpers\";\n@import \"settings/_variables.scss\";\n\n// Tools (Default mixins and functions)\n// =====================\n@import \"neat\";\n@import \"tools/unit\";\n@import \"tools/type\";\n@import \"tools/images\";\n@import \"tools/layout\";\n@import \"tools/splatter\";\n\n// Header\n.c-banner__link {\n  color: $gray;\n}\n\n.c-banner__logo-wrapper {\n  top: 0;\n}\n\n.no-touchevents {\n  &:hover {\n    color: $gray;\n  }\n  .c-banner__link {\n    &:hover,\n    &:focus {\n      color: $dark-gray-1;\n    }\n  }\n}\n\n//Static Column Right\n.o-scroll-column--right {\n  background: $color-background-shade;\n  padding: rem-calc(8 0);\n}\n\n// List Box Heading\n//\n// Top level list item or section heading.\n// If used with the accordion pattern, this will be whatever the accordion drawer\n// heading is.\n//\n\n.c-list-box-topics {\n  padding-top: 0;\n  margin: rem-calc(0 15);\n\n  @include media($bp-medium) {\n    margin: rem-calc(0 30);\n  }\n\n  @include media($bp-xlarge) {\n    margin: rem-calc(0 45);\n  }\n}\n\n.c-list-box-topics__item {\n  display: inline-block;\n  width: 100%;\n  position: relative;\n  background: $white;\n  color: $very-dark-gray;\n  padding: rem-calc(30 25);\n  margin: rem-calc(8 0);\n\n  @include media($bp-medium) {\n    padding: rem-calc(35 35);\n  }\n\n  @include media($bp-xlarge) {\n    padding: rem-calc(40 45);\n  }\n\n  &:before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    border-top: rem-calc(7) solid $dark-gray-1;\n  }\n\n  .c-list-box-topics__text {\n    display: inline-block;\n    margin-bottom: rem-calc(25);\n    @include media($bp-medium) {\n      margin-bottom: rem-calc(33);\n    }\n  }\n\n  .button--primary__curved {\n    color: $white;\n    font-family: $font-family-display;\n    background: $dark-gray-1;\n    @include font-size-x-large;\n    font-weight: $font-weight-extrablack;\n    border-radius: rem-calc(35);\n    border: none;\n\n    &:hover {\n      background: $gray;\n    }\n  }\n\n  //Colors of list box items\n  &.topics__item {\n    &:before {\n      border-color: $purple;\n    }\n\n    .button--primary__curved {\n      background: $purple;\n      &:hover {\n        background: $gray;\n      }\n    }\n  }\n\n  &.inspirations__item {\n    &:before {\n      border-color: $dark-blue;\n    }\n\n    .button--primary__curved {\n      background: $dark-blue;\n      &:hover {\n        background: $gray;\n      }\n    }\n  }\n\n  &.trips__item {\n    &:before {\n      border-color: $green;\n    }\n\n    .button--primary__curved {\n      background: $green;\n      &:hover {\n        background: $gray;\n      }\n    }\n  }\n}\n\n// Footer\n.c-footer {\n  background: $dark-gray-1;\n}","@charset \"UTF-8\";\n\n@if $border-box-sizing == true {\n  html { // http://bit.ly/1qk2tVR\n    box-sizing: border-box;\n  }\n\n  * {\n    &,\n    &::after,\n    &::before {\n      box-sizing: inherit;\n    }\n  }\n}\n","// Taken from https://github.com/zurb/foundation-sites/blob/develop/scss/util/_unit.scss\n\n/* stylelint-disable */\n\n/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.\n///\n/// @param {Number} $num - Number to strip unit from.\n///\n/// @returns {Number} The same number, sans unit.\n@function strip-unit($num) {\n  @return $num / ($num * 0 + 1);\n}\n\n/// Converts one or more pixel values into matching rem values.\n///\n/// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.\n/// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$base-font-size` variable as the base.\n///\n/// @returns {List} A list of converted values.\n@function rem-calc($values, $base: null) {\n  $rem-values: ();\n  $count: length($values);\n\n  // If no base is defined, defer to the global font size\n  @if $base == null {\n    $base: 100%;\n  }\n\n  // If the base font size is a %, then multiply it by 16px\n  // This is because 100% font size = 16px in most all browsers\n  @if unit($base) == '%' {\n    $base: ($base / 100%) * 16px;\n  }\n\n  @if $count == 1 {\n    @return -zf-to-rem($values, $base);\n  }\n\n  @for $i from 1 through $count {\n    $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));\n  }\n\n  @return $rem-values;\n}\n\n/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.\n/// @access private\n///\n/// @param {Number} $value - Pixel value to convert.\n/// @param {Number} $base [null] - Base for pixel conversion.\n///\n/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.\n@function -zf-to-rem($value, $base: null) {\n  // Check if the value is a number\n  @if type-of($value) != 'number' {\n    @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';\n    @return $value;\n  }\n\n  // Calculate rem if units for $value is not rem\n  @if unit($value) != 'rem' {\n    $value: strip-unit($value) / strip-unit($base) * 1rem;\n  }\n\n  // Turn 0rem into 0\n  @if $value == 0rem {\n    $value: 0;\n  }\n\n  @return $value;\n}\n\n/* stylelint-enable */","// Site Variables\n//\n\n// Colors By Name\n// =====================\n$black: #000;\n$bright-blue: #2793e0;\n$bright-red: #fb0000;\n$dark-pink: #7f1c4e;\n$dark-gray: #6a6a6a;\n$dark-green: #1d5d11;\n$gray: #999;\n$pure-orange: #ff9d00;\n$strong-blue: #0055b8;\n$strong-lime-green: #35c621;\n$strong-pink: #d8006d;\n$very-dark-blue: #00326d;\n$very-dark-gray: #333;\n$very-dark-gray-transparent: rgba(51, 51, 51, .5);\n$very-light-gray: #eee;\n$vivid-orange: #ff6100;\n$white: #fff;\n$purple: #7735b2;\n$dark-purple: #3c036f;\n\n//Created gray colours as in the color palette\n$gray-1: #404657;\n$light-gray-1: rgba(45, 51, 61, .5);\n$dark-gray-1: #2d333d;\n\n//Colors for Micro Site\n$dark-blue: #144f82;\n$green: #00965c;\n\n// Colors By Usage\n// =====================\n$color-shadow: rgba(0, 0, 0, .2);\n$color-primary: $bright-blue;\n$color-secondary: $strong-blue;\n$color-background: $white;\n$color-background-shade: $very-light-gray;\n$color-text: $very-dark-gray;\n$color-text-invert: $white;\n$color-text-weak: $gray;\n$color-text-link: $color-primary;\n$color-background-footer: $color-primary;\n$color-error: $strong-pink;\n\n// Colors By Age Group\n// =====================\n$color-baby: $strong-pink;\n$color-baby-secondary: $dark-pink;\n$color-toddler: $vivid-orange;\n$color-toddler-secondary: $bright-red;\n$color-pre-schooler: $pure-orange;\n$color-pre-schooler-secondary: $vivid-orange;\n$color-grade-schooler: $strong-lime-green;\n$color-grade-schooler-secondary: $dark-green;\n$color-pre-teen: $strong-blue;\n$color-pre-teen-secondary: $very-dark-blue;\n$color-teen: $purple;\n$color-teen-secondary: $dark-purple;\n$color-young-adult: $gray-1;\n$color-young-adult-secondary: $dark-gray-1;\n\n// Font Families\n// =====================\n$font-family-text: \"open-sans\", sans-serif;\n$font-family-display: \"museo-sans-rounded\", sans-serif;\n\n// Font Weights\n// =====================\n$font-weight-medium: 500;\n$font-weight-semibold: 600;\n$font-weight-extrablack: 900;\n\n// Font Sizes\n// =====================\n$font-size-ratio: .875;\n$font-size-xx-small: 11;\n$font-size-x-small: 13;\n$font-size-small: 16;\n$font-size-regular: 18;\n$font-size-large: 21;\n$font-size-x-large: 24;\n$font-size-xx-large: 30;\n$font-size-xxx-large-mobile: 40;\n$font-size-xxx-large: 66;\n\n// transitions\n// =====================\n$button-transition: all ease-in-out .15s;\n$link-transition: all ease-in-out .15s;\n\n// Z-Indexes\n// =====================\n$z-index-offcanvas-side: 101;\n$z-index-offcanvas-overlay: 100;\n$z-index-offcanvas-main: 99;\n$z-index-alert: 4;\n$z-index-header: 3;\n$z-index-search-overlay: 2;\n$z-index-hero-title: 1;\n\n// Grid Settings\n// See http://thoughtbot.github.io/neat-docs/latest\n// =====================\n$column: 70px;\n$gutter: 40px;\n$grid-columns: 12;\n$max-width-med: 900px;\n$max-width: 80em;\n$outer-gutter: 15;\n$outer-gutter-small: 20;\n$outer-gutter-medium: 30;\n$outer-gutter-large: 40;\n$horizontal-gutter: 20px;\n\n// Breakpoints\n// =====================\n$bp-small: new-breakpoint(min-width 375px);\n$bp-medium: new-breakpoint(min-width 700px);\n$bp-large: new-breakpoint(min-width 1024px);\n$bp-xlarge: new-breakpoint(min-width 1200px);\n$breakpoint-font: $bp-large;\n\n$bp-mobile-only: new-breakpoint(max-width 1023px);\n\n// Heights\n// =====================\n$height-banner: 50;\n$height-banner-large: 60;\n$height-banner-logo: 60;\n\n// Widths\n// =====================\n$width-banner-logo: 75px;\n$width-offcanvas-side: 300px;\n$width-offcanvas-side-large: 350px;\n\n// General Sizes\n// =====================\n$sticker-size-mobile: 80;\n$sticker-size: 100;","@charset \"UTF-8\";\n\n/// Outputs a media-query block with an optional grid context (the total number of columns used in the grid).\n///\n/// @param {List} $query\n///   A list of media query features and values, where each `$feature` should have a corresponding `$value`.\n///   For a list of valid values for `$feature`, click [here](http://www.w3.org/TR/css3-mediaqueries/#media1).\n///\n///   If there is only a single `$value` in `$query`, `$default-feature` is going to be used.\n///\n///   The number of total columns in the grid can be set by passing `$columns` at the end of the list (overrides `$total-columns`).\n///\n///\n/// @param {Number (unitless)} $total-columns [$grid-columns]\n///   - Number of columns to use in the new grid context. Can be set as a shorthand in the first parameter.\n///\n/// @example scss - Usage\n///   .responsive-element {\n///      @include media(769px) {\n///        @include span-columns(6);\n///      }\n///   }\n///\n///  .new-context-element {\n///    @include media(min-width 320px max-width 480px, 6) {\n///      @include span-columns(6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///  @media screen and (min-width: 769px) {\n///    .responsive-element {\n///      display: block;\n///      float: left;\n///      margin-right: 2.35765%;\n///      width: 48.82117%;\n///    }\n///\n///    .responsive-element:last-child {\n///      margin-right: 0;\n///    }\n///  }\n///\n///  @media screen and (min-width: 320px) and (max-width: 480px) {\n///    .new-context-element {\n///      display: block;\n///      float: left;\n///      margin-right: 4.82916%;\n///      width: 100%;\n///    }\n///\n///    .new-context-element:last-child {\n///      margin-right: 0;\n///    }\n///  }\n\n@mixin media($query: $feature $value $columns, $total-columns: $grid-columns) {\n  @if length($query) == 1 {\n    @media screen and ($default-feature: nth($query, 1)) {\n      $default-grid-columns: $grid-columns;\n      $grid-columns: $total-columns !global;\n      @content;\n      $grid-columns: $default-grid-columns !global;\n    }\n  } @else {\n    $loop-to: length($query);\n    $media-query: \"screen and \";\n    $default-grid-columns: $grid-columns;\n    $grid-columns: $total-columns !global;\n\n    @if is-not(is-even(length($query))) {\n      $grid-columns: nth($query, $loop-to) !global;\n      $loop-to: $loop-to - 1;\n    }\n\n    $i: 1;\n    @while $i <= $loop-to {\n      $media-query: $media-query + \"(\" + nth($query, $i) + \": \" + nth($query, $i + 1) + \") \";\n\n      @if ($i + 1) != $loop-to {\n        $media-query: $media-query + \"and \";\n      }\n\n      $i: $i + 2;\n    }\n\n    @media #{$media-query} {\n      @content;\n      $grid-columns: $default-grid-columns !global;\n    }\n  }\n}\n","// Mixins for font sizes and styles\n\n// Font Sizes\n// =====================\n@mixin font-size($large, $mobile: null) {\n  @if $mobile {\n    font-size: rem-calc($mobile);\n    @include media($breakpoint-font) {\n      font-size: rem-calc($large);\n    }\n  }\n  @else if $large > 16 {\n    font-size: rem-calc($large * $font-size-ratio);\n    @include media($breakpoint-font) {\n      font-size: rem-calc($large);\n    }\n  }\n  @else {\n    font-size: rem-calc($large);\n  }\n}\n\n@mixin font-size-x-small {\n  @include font-size($font-size-x-small);\n}\n\n@mixin font-size-small {\n  @include font-size($font-size-small);\n}\n\n@mixin font-size-regular {\n  @include font-size($font-size-regular);\n}\n\n@mixin font-size-large {\n  @include font-size($font-size-large);\n}\n\n@mixin font-size-x-large {\n  @include font-size($font-size-x-large);\n}\n\n@mixin font-size-xx-large {\n  font-size: rem-calc($font-size-xx-large);\n}\n\n@mixin font-size-xxx-large {\n  font-size: rem-calc($font-size-xxx-large-mobile);\n\n  @include media($bp-medium) {\n    font-size: rem-calc($font-size-xxx-large);\n  }\n}\n\n@mixin text-uppercase {\n  letter-spacing: .5px;\n  line-height: 1;\n  text-transform: uppercase;\n}\n"]}